loading data
Begin training
fold: 1
Traceback (most recent call last):
  File "/mnt/c/Users/susan/git/HEA-Toxicity-Prediction/runner.py", line 140, in <module>
    train_loss = do_epoch_classify(model, device, train_loader, True, optimizer=optimizer)
  File "/mnt/c/Users/susan/git/HEA-Toxicity-Prediction/runner.py", line 114, in do_epoch_classify
    loss = np.sum(np.array(losses)) / len(losses) #avg loss
  File "/home/susan/.local/lib/python3.9/site-packages/torch/_tensor.py", line 757, in __array__
    return self.numpy()
RuntimeError: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead.
[tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True), tensor(801., requires_grad=True)]