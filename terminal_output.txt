Assembling input
len input: 5070
len output: 5070
ToxicityRegressor(
  (layer_1): Linear(in_features=801, out_features=16, bias=True)
  (layer_2): Linear(in_features=16, out_features=32, bias=True)
  (layer_3): Linear(in_features=32, out_features=16, bias=True)
  (layer_out): Linear(in_features=16, out_features=1, bias=True)
  (relu): ReLU()
)
Begin training
on epoch 0 out of 150
/home/susan/.local/lib/python3.9/site-packages/torch/nn/modules/loss.py:530: UserWarning: Using a target size (torch.Size([64, 1, 229432])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
Traceback (most recent call last):
  File "/mnt/c/Users/susan/git/HEA-Toxicity-Prediction/runner.py", line 60, in <module>
    train_loss = criterion(y_train_pred, local_output.unsqueeze(1))
  File "/home/susan/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/susan/.local/lib/python3.9/site-packages/torch/nn/modules/loss.py", line 530, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/home/susan/.local/lib/python3.9/site-packages/torch/nn/functional.py", line 3280, in mse_loss
    return torch._C._nn.mse_loss(expanded_input, expanded_target, _Reduction.get_enum(reduction))
RuntimeError: CUDA out of memory. Tried to allocate 3.50 GiB (GPU 0; 8.00 GiB total capacity; 3.56 GiB already allocated; 0 bytes free; 7.01 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF